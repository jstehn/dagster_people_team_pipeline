name: Serverless Prod Deployment
on:
  push:
    branches:
      - "main"
      - "master"

concurrency:
  # Cancel in-progress deploys to same branch
  group: ${{ github.ref }}/deploy
  cancel-in-progress: true
env:
  DAGSTER_CLOUD_URL: "http://caliberpublicschools.dagster.cloud"
  DAGSTER_CLOUD_API_TOKEN: ${{ secrets.DAGSTER_CLOUD_API_TOKEN }}
  ENABLE_FAST_DEPLOYS: "true"
  PYTHON_VERSION: "3.10"
  DAGSTER_CLOUD_FILE: "dagster_cloud.yaml"

jobs:
  dagster_cloud_default_deploy:
    name: Dagster Serverless Deploy
    runs-on: ubuntu-22.04
    outputs:
      build_info: ${{ steps.parse-workspace.outputs.build_info }}

    steps:
      - name: Prerun Checks
        id: prerun
        uses: dagster-io/dagster-cloud-action/actions/utils/prerun@v0.1

      - name: Launch Docker Deploy
        if: steps.prerun.outputs.result == 'docker-deploy'
        id: parse-workspace
        uses: dagster-io/dagster-cloud-action/actions/utils/parse_workspace@v0.1
        with:
          dagster_cloud_file: $DAGSTER_CLOUD_FILE

      - name: Checkout for Python Executable Deploy
        if: steps.prerun.outputs.result == 'pex-deploy'
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }} # Or github.sha for specific commit
          path: project-repo

      - name: Set up Python for PEX build
        if: steps.prerun.outputs.result == 'pex-deploy'
        uses: actions/setup-python@v5 # Using a more recent version
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dbt and dagster-dbt for packaging
        if: steps.prerun.outputs.result == 'pex-deploy'
        run: |
          pip install dagster-dbt dbt-postgres dbt-bigquery
          echo "Please ensure your dbt adapter (e.g., dbt-postgres, dbt-snowflake) is installed here."
        # This installs tools needed for the next step, not necessarily for the final PEX,
        # though dagster-dbt (library) should be in your project dependencies if used at runtime.

      - name: Debug and Prepare dbt project
        if: steps.prerun.outputs.result == 'pex-deploy'
        id: prepare_dbt
        # Explicitly pull repository variables into the step's environment
        # using the 'vars' context. Fall back to 'env' just in case.
        env:
          # This creates shell environment variables for this step based on GitHub Actions contexts
          EFFECTIVE_DBT_PROJECT_DIR: ${{ vars.DBT_PROJECT_DIR || env.DBT_PROJECT_DIR }}
          EFFECTIVE_DBT_PROFILES_DIR: ${{ vars.DBT_PROFILES_DIR || env.DBT_PROFILES_DIR }}
          GCP_CREDS: ${{ secrets.GCP_CREDS }}
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
        # The working-directory now uses the variable defined directly in this step's env block
        working-directory: ${{ github.workspace }}/project-repo/${{ env.EFFECTIVE_DBT_PROJECT_DIR }}
        run: |
          echo "--- Debugging GitHub Actions Contexts ---"
          echo "1. Value from repository 'vars.DBT_PROJECT_DIR': [${{ vars.DBT_PROJECT_DIR }}]"
          echo "2. Value from general 'env.DBT_PROJECT_DIR' (might be empty if not propagated): [${{ env.DBT_PROJECT_DIR }}]"
          echo "3. EFFECTIVE_DBT_PROJECT_DIR for this step (should be populated): [${{ env.EFFECTIVE_DBT_PROJECT_DIR }}]"
          echo "4. Value from repository 'vars.DBT_PROFILES_DIR': [${{ vars.DBT_PROFILES_DIR }}]"
          echo "5. EFFECTIVE_DBT_PROFILES_DIR for this step (should be populated): [${{ env.EFFECTIVE_DBT_PROFILES_DIR }}]"
          echo "--- End Debugging ---"

          # Critical check: Ensure EFFECTIVE_DBT_PROJECT_DIR is not empty
          # Note: Inside the shell script, access it as $EFFECTIVE_DBT_PROJECT_DIR (or $EFFECTIVE_DBT_PROJECT_DIR)
          # The ${{ env.EFFECTIVE_DBT_PROJECT_DIR }} above is for GitHub Actions to pre-process the string.
          # Here, we use shell syntax to check the variable that was set for the shell.
          if [ -z "$EFFECTIVE_DBT_PROJECT_DIR" ]; then
            echo "Error: EFFECTIVE_DBT_PROJECT_DIR is empty. Check repository variable DBT_PROJECT_DIR and workflow setup."
            exit 1
          fi
          # Also good to check DBT_PROFILES_DIR if it's critical for dbt parse
          if [ -z "$EFFECTIVE_DBT_PROFILES_DIR" ]; then
            echo "Warning: EFFECTIVE_DBT_PROFILES_DIR is empty. dbt might use default profiles dir."
            # Depending on your setup, you might want to exit 1 here too.
          fi

          echo "Current directory: $(pwd)"
          echo "Listing files in current directory (this should be your dbt project dir: project-repo/${EFFECTIVE_DBT_PROJECT_DIR}):"
          ls -la

          echo "Attempting to prepare dbt project using file: project.py (relative to current directory)"
          # This assumes 'project.py' and 'dbt_project.yml' are directly in EFFECTIVE_DBT_PROJECT_DIR
          # The DBT_PROFILES_DIR for dbt to use is $EFFECTIVE_DBT_PROFILES_DIR (set as env var for the shell)
          dagster-dbt project prepare-and-package --file project.py

          # --- .env file handling ---
          if [ -f .env ]; then
            echo "Found .env file. Contents:"
            cat .env
            DAGSTER_DBT_TEMP_DIR_VALUE=$(grep DAGSTER_DBT_TEMPORARY_PROJECT_DIR .env | cut -d '=' -f2-)
            echo "DAGSTER_DBT_TEMPORARY_PROJECT_DIR=${DAGSTER_DBT_TEMP_DIR_VALUE}" >> $GITHUB_ENV
            echo "Exported DAGSTER_DBT_TEMPORARY_PROJECT_DIR to GITHUB_ENV"
          else
            echo "Error: .env file not found after running dagster-dbt project prepare-and-package."
            exit 1
          fi

      - name: Python Executable Deploy
        if: steps.prerun.outputs.result == 'pex-deploy'
        uses: dagster-io/dagster-cloud-action/actions/build_deploy_python_executable@v0.1
        with:
          dagster_cloud_file: "${{ github.workspace }}/project-repo/${{ env.DAGSTER_CLOUD_FILE }}"
          build_output_dir: "${{ github.workspace }}/build"
          python_version: "${{ env.PYTHON_VERSION }}"
        env:
          # GITHUB_TOKEN is used by the action for releases if applicable.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # DAGSTER_DBT_TEMPORARY_PROJECT_DIR will be automatically available here
          # because we added it to $GITHUB_ENV in the previous step.
          # This allows your DbtProject definition in Python to find the packaged dbt project.

  dagster_cloud_docker_deploy:
    name: Docker Deploy
    runs-on: ubuntu-20.04
    if: needs.dagster_cloud_default_deploy.outputs.build_info
    needs: dagster_cloud_default_deploy
    strategy:
      fail-fast: false
      matrix:
        location: ${{ fromJSON(needs.dagster_cloud_default_deploy.outputs.build_info) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
      - name: Build and deploy to Dagster Cloud serverless
        uses: dagster-io/dagster-cloud-action/actions/serverless_prod_deploy@v0.1
        with:
          dagster_cloud_api_token: ${{ secrets.DAGSTER_CLOUD_API_TOKEN }}
          location: ${{ toJson(matrix.location) }}
          base_image: "python:${{ env.PYTHON_VERSION }}-slim"
          # Uncomment to pass through Github Action secrets as a JSON string of key-value pairs
          # env_vars: ${{ toJson(secrets) }}
          organization_id: ${{ secrets.ORGANIZATION_ID }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
